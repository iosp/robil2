<!-- -*- mode: XML -*- -->
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find gazebo_gps_ins)/worlds/gps_ins.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" command="cat $(find bobcat)/urdf/BOBCAT_sdf_model.URDF" />
  <param name="robot_description2" command="cat $(find bobcat)/urdf/bobcat_150909.sdf" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-sdf -model Sahar -param robot_description2 -z 0.3"/>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find bobcat_gazebo)/config/bobcat_gazebo_control_sdf_model.yaml" command="load"/>

  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
	output="screen" ns="/Sahar" args="joint_state_controller
					  loader_position_controller
					  supporter_position_controller
                                          brackets_position_controller"/>

 <node name="RateToEffort" pkg="rate2effort" type="rate2effort" cwd="node" output="screen" /> 

</launch>



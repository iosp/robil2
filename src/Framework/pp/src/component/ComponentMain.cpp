
/*
 * ComponentMain.cpp
 *
 *  Created on: Thursday, 27. February 2014 12:29PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"

#include "MoveBase.h"
#include <ros/ros.h>
#include <std_msgs/String.h>

#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>

ComponentMain::ComponentMain(int argc,char** argv)	: _inited(init(argc, argv))
{
	_sub_GlobalPath=ros::Subscriber(_nh.subscribe("/SMME/GlobalPath", 10, &ComponentMain::handleGlobalPath,this));
	_sub_BladePosition=ros::Subscriber(_nh.subscribe("/PER/BladPosition", 10, &ComponentMain::handleBladePosition,this));
	_sub_Map=ros::Subscriber(_nh.subscribe("/PER/Map", 10, &ComponentMain::handleMap,this));
	_sub_Location=ros::Subscriber(_nh.subscribe("/LOC/Pose", 10, &ComponentMain::handleLocation,this));
	_pub_LocalPath=ros::Publisher(_nh.advertise<robil_msgs::Path>("/PP/Path",10));
	_pub_diagnostic=ros::Publisher(_nh.advertise<diagnostic_msgs::DiagnosticArray>("/diagnostics",100));
	_maintains.add_thread(new boost::thread(boost::bind(&ComponentMain::heartbeat,this)));

	_events = 0;

	_move_base = new MoveBase(this);
}
ComponentMain::~ComponentMain() {
	if(_move_base) delete _move_base; _move_base=0;

}

bool ComponentMain::init(int argc,char** argv){
	ros::init(argc,argv,"PP_node");
	return true;
}

void ComponentMain::handleGlobalPath(const robil_msgs::Path& msg)
{
	_move_base -> on_path(msg);
}
	

void ComponentMain::handleBladePosition(const sensor_msgs::JointState& msg)
{
	//std::cout<< "PP say:" << msg << std::endl;
}
	

void ComponentMain::handleMap(const robil_msgs::Map& msg)
{
	_move_base -> on_map(msg);
}
	

void ComponentMain::handleLocation(const geometry_msgs::PoseWithCovarianceStamped& msg)
{
	_move_base -> on_position_update(msg);

}
	

void ComponentMain::publishLocalPath(robil_msgs::Path& msg)
{
	_pub_LocalPath.publish(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform ComponentMain::getLastTransform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
	static tf::TransformListener listener;
	try {
	    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
	    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
	} catch (tf::TransformException& ex) {
	    ROS_ERROR("%s",ex.what());
	}
	return _tf;
}
void ComponentMain::publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
	msg.status.push_back(_report);
	_pub_diagnostic.publish(msg);
}
void ComponentMain::publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
		msg.header = header;
		msg.status.push_back(_report);
		_pub_diagnostic.publish(msg);
}

void ComponentMain::heartbeat(){
	using namespace boost::posix_time;
	ros::Publisher _pub = _nh.advertise<std_msgs::String>("/heartbeat", 10);
	double hz = HEARTBEAT_FREQUANCY;
	while(ros::ok()){
		boost::system_time stop_time = boost::get_system_time() + milliseconds((1/hz)*1000);
		std_msgs::String msg;
		msg.data = "PP";
		_pub.publish(msg);
	    boost::this_thread::sleep(stop_time);
	}
}

#include <decision_making/ROSTask.h>
void ComponentMain::set_events(decision_making::EventQueue* events){
	boost::mutex::scoped_lock l(_mt);
	_events = events;
}
void ComponentMain::rise_taskFinished(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->raiseEvent("/CompleteTask");
	//_events->raiseEvent("/pp/Standby");
}
void ComponentMain::rise_taskAborted(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->raiseEvent("/AbortTask");
	//_events->raiseEvent("/pp/Standby");
}
void ComponentMain::rise_taskStarted(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->raiseEvent("/TaskIsStarted");
}
void ComponentMain::rise_taskPaused(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->raiseEvent("/TaskIsPaused");
}

void ComponentMain::cancel_navigation(){
	ROS_DEBUG("PP: cancel navigation (deactivate and clear goal)");
	_move_base->deactivate(true);
}
void ComponentMain::pause_navigation(){
	ROS_DEBUG("PP: pause navigation (deactivate but don't clear goal)");
	_move_base->deactivate();
}
void ComponentMain::resume_navigation(){
	ROS_DEBUG("PP: resume navigation (activate)");
	_move_base->activate();
}


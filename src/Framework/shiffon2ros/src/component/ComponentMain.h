
/*
 * ComponentMain.h
 *
 *  Created on: Monday, 07. September 2015 03:23PM
 *      Author: autogenerated
 */
#ifndef COMPONENTMAIN_H_
#define COMPONENTMAIN_H_
#include <std_msgs/String.h>

#ifndef COMPONENT
#define COMPONENT context.parameters<Params>().comp
#endif

#ifndef HEARTBEAT_FREQUANCY
#define HEARTBEAT_FREQUANCY 2 //Hz
#endif

#ifndef HEARTBEAT_FREQUENCY
#define HEARTBEAT_FREQUENCY 2 //Hz
#endif

#include <sensor_msgs/Imu.h>
#include <sensor_msgs/NavSatFix.h>
#include <sensor_msgs/NavSatStatus.h>
#include <std_msgs/Float64.h>
#include <diagnostic_msgs/DiagnosticArray.h>
#include <robil_msgs/GpsSpeed.h>



#include <tf/tf.h>
#include "../Shiphon_IO/Shiphon_IO.h"

#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <boost/thread.hpp>
//#include <Eigen/Eigen>

class ComponentMain {
    bool _inited, _reverse;
	  ros::NodeHandle _nh;
	  ros::Publisher _pub_diagnostic;
	  boost::thread_group _maintains;

		ros::Publisher  _pub_GPSPose;
		ros::Publisher  _pub_INS;
		ros::Publisher  _pub_GpsSpeed;

		string IPADDR;

	  bool init(int argc,char** argv);
	Shiphon_Ctrl * 	_shiphonCtrl;
	pthread_t _myHeartbeatThread;
    tf::Quaternion _prev_quat;
public:
	ComponentMain(int argc,char** argv);
	virtual ~ComponentMain();

	void publishGPS(sensor_msgs::NavSatFix& msg);
	void publishINS(sensor_msgs::Imu& msg);
	void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
	tf::StampedTransform getLastTransform(std::string srcFrame, std::string distFrame);
	void publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report);
	void publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report);

	void InitShiphonConection();
	void ReadAndPub_ShiphonGPS();
	void ReadAndPub_ShiphonINS();
	void ReadAndPub_ShiphonGpsSpeed();
	void heartbeat();
	static void *callHeartbeat(void *pThis);

};
#endif /* COMPONENTMAIN_H_ */

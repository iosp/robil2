
/*
 * RosComm.cpp
 *
 *  Created on: Sunday, 02. February 2014 10:15AM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{

	_pub_Sensor_SICK=ros::Publisher(_nh.advertise<config::SENSORS::pub::Sensor_SICK>(fetchParam(&_nh,"SENSORS","Sensor_SICK","pub"),10));
	_pub_Sensor_IBEO=ros::Publisher(_nh.advertise<config::SENSORS::pub::Sensor_IBEO>(fetchParam(&_nh,"SENSORS","Sensor_IBEO","pub"),10));
	_pub_Sensor_CAM_R=ros::Publisher(_nh.advertise<config::SENSORS::pub::Sensor_CAM_R>(fetchParam(&_nh,"SENSORS","Sensor_CAM_R","pub"),10));
	_pub_Sensor_CAM_L=ros::Publisher(_nh.advertise<config::SENSORS::pub::Sensor_CAM_L>(fetchParam(&_nh,"SENSORS","Sensor_CAM_L","pub"),10));
	_pub_Sensor_WIRE=ros::Publisher(_nh.advertise<config::SENSORS::pub::Sensor_WIRE>(fetchParam(&_nh,"SENSORS","Sensor_WIRE","pub"),10));
	_pub_Sensor_GPS=ros::Publisher(_nh.advertise<config::SENSORS::pub::Sensor_GPS>(fetchParam(&_nh,"SENSORS","Sensor_GPS","pub"),10));
	_pub_Sensor_INS=ros::Publisher(_nh.advertise<config::SENSORS::pub::Sensor_INS>(fetchParam(&_nh,"SENSORS","Sensor_INS","pub"),10));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"SENSORS_node");
	return true;
}



void RosComm::publishSensor_SICK( config::SENSORS::pub::Sensor_SICK &msg)
{
	_pub_Sensor_SICK.publish(msg);
}
	

void RosComm::publishSensor_IBEO( config::SENSORS::pub::Sensor_IBEO &msg)
{
	_pub_Sensor_IBEO.publish(msg);
}
	

void RosComm::publishSensor_CAM_R( config::SENSORS::pub::Sensor_CAM_R &msg)
{
	_pub_Sensor_CAM_R.publish(msg);
}
	

void RosComm::publishSensor_CAM_L( config::SENSORS::pub::Sensor_CAM_L &msg)
{
	_pub_Sensor_CAM_L.publish(msg);
}
	

void RosComm::publishSensor_WIRE( config::SENSORS::pub::Sensor_WIRE &msg)
{
	_pub_Sensor_WIRE.publish(msg);
}
	

void RosComm::publishSensor_GPS( config::SENSORS::pub::Sensor_GPS &msg)
{
	_pub_Sensor_GPS.publish(msg);
}
	

void RosComm::publishSensor_INS( config::SENSORS::pub::Sensor_INS &msg)
{
	_pub_Sensor_INS.publish(msg);
}
	

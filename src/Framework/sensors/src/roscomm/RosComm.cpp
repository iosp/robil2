
/*
 * RosComm.cpp
 *
 *  Created on: Tuesday, 25. February 2014 12:20PM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{

	_pub_SensorINS=ros::Publisher(_nh.advertise<config::SENSORS::pub::SensorINS>(fetchParam(&_nh,"SENSORS","SensorINS","pub"),10));
	_pub_SensorGPS=ros::Publisher(_nh.advertise<config::SENSORS::pub::SensorGPS>(fetchParam(&_nh,"SENSORS","SensorGPS","pub"),10));
	_pub_SensorCamL=ros::Publisher(_nh.advertise<config::SENSORS::pub::SensorCamL>(fetchParam(&_nh,"SENSORS","SensorCamL","pub"),10));
	_pub_SensorCamR=ros::Publisher(_nh.advertise<config::SENSORS::pub::SensorCamR>(fetchParam(&_nh,"SENSORS","SensorCamR","pub"),10));
	_pub_SensorWire=ros::Publisher(_nh.advertise<config::SENSORS::pub::SensorWire>(fetchParam(&_nh,"SENSORS","SensorWire","pub"),10));
	_pub_SensorSICK=ros::Publisher(_nh.advertise<config::SENSORS::pub::SensorSICK>(fetchParam(&_nh,"SENSORS","SensorSICK","pub"),10));
	_pub_SensorIBEO1=ros::Publisher(_nh.advertise<config::SENSORS::pub::SensorIBEO1>(fetchParam(&_nh,"SENSORS","SensorIBEO1","pub"),10));
	_pub_SensorIBEO2=ros::Publisher(_nh.advertise<config::SENSORS::pub::SensorIBEO2>(fetchParam(&_nh,"SENSORS","SensorIBEO2","pub"),10));
	_pub_SensorIBEO3=ros::Publisher(_nh.advertise<config::SENSORS::pub::SensorIBEO3>(fetchParam(&_nh,"SENSORS","SensorIBEO3","pub"),10));
	_pub_SensorIBEO4=ros::Publisher(_nh.advertise<config::SENSORS::pub::SensorIBEO4>(fetchParam(&_nh,"SENSORS","SensorIBEO4","pub"),10));
	_pub_diagnostic=ros::Publisher(_nh.advertise<diagnostic_msgs::DiagnosticArray>("/diagnostics",100));
	_maintains.add_thread(new boost::thread(boost::bind(&RosComm::heartbeat,this)));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"SENSORS_node");
	return true;
}



void RosComm::publishSensorINS( config::SENSORS::pub::SensorINS &msg)
{
	_pub_SensorINS.publish(msg);
}
	

void RosComm::publishSensorGPS( config::SENSORS::pub::SensorGPS &msg)
{
	_pub_SensorGPS.publish(msg);
}
	

void RosComm::publishSensorCamL( config::SENSORS::pub::SensorCamL &msg)
{
	_pub_SensorCamL.publish(msg);
}
	

void RosComm::publishSensorCamR( config::SENSORS::pub::SensorCamR &msg)
{
	_pub_SensorCamR.publish(msg);
}
	

void RosComm::publishSensorWire( config::SENSORS::pub::SensorWire &msg)
{
	_pub_SensorWire.publish(msg);
}
	

void RosComm::publishSensorSICK( config::SENSORS::pub::SensorSICK &msg)
{
	_pub_SensorSICK.publish(msg);
}
	

void RosComm::publishSensorIBEO1( config::SENSORS::pub::SensorIBEO1 &msg)
{
	_pub_SensorIBEO1.publish(msg);
}
	

void RosComm::publishSensorIBEO2( config::SENSORS::pub::SensorIBEO2 &msg)
{
	_pub_SensorIBEO2.publish(msg);
}
	

void RosComm::publishSensorIBEO3( config::SENSORS::pub::SensorIBEO3 &msg)
{
	_pub_SensorIBEO3.publish(msg);
}
	

void RosComm::publishSensorIBEO4( config::SENSORS::pub::SensorIBEO4 &msg)
{
	_pub_SensorIBEO4.publish(msg);
}
	
void RosComm::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform RosComm::getLastTrasform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
	static tf::TransformListener listener;
	try {
	    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
	    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
	} catch (tf::TransformException& ex) {
	    ROS_ERROR("%s",ex.what());
	}
	return _tf;
}
void RosComm::publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
	msg.status.push_back(_report);
	_pub_diagnostic.publish(msg);
}
void RosComm::publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
	msg.header = header;
	msg.status.push_back(_report);
	_pub_diagnostic.publish(msg);
}
void RosComm::heartbeat(){
	using namespace boost::posix_time;
	ros::Publisher _pub = _nh.advertise<std_msgs::String>("/heartbeat", 10);
	double hz = HEARTBEAT_FREQUANCY;
	while(ros::ok()){
		boost::system_time stop_time = boost::get_system_time() + milliseconds((1/hz)*1000);
		std_msgs::String msg;
		msg.data = "SENSORS";
		_pub.publish(msg);
	    boost::this_thread::sleep(stop_time);
	}
}


/*
 * ComponentMain.cpp
 *
 *  Created on: Wednesday, 09. April 2014 08:18AM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include <ros/ros.h>
#include <std_msgs/String.h>

#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
ComponentMain::ComponentMain(int argc,char** argv) : _inited(init(argc, argv)), _events(0)
{
	_sub_CustomIED=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"IEDSIM","CustomIED","sub"), 10, &ComponentMain::handleCustomIED,this));
	_sub_Location=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"IEDSIM","Location","sub"), 10, &ComponentMain::handleLocation,this));
	_pub_IEDLocation=ros::Publisher(_nh.advertise<config::IEDSIM::pub::IEDLocation>(fetchParam(&_nh,"IEDSIM","IEDLocation","pub"),10));
	_pub_diagnostic=ros::Publisher(_nh.advertise<diagnostic_msgs::DiagnosticArray>("/diagnostics",100));
	_maintains.add_thread(new boost::thread(boost::bind(&ComponentMain::heartbeat,this)));
	_lg=new IEDSimLogic;
}

ComponentMain::~ComponentMain() {}

bool ComponentMain::init(int argc,char** argv)
{
	ros::init(argc,argv,"IEDSIM_node");
	return true;
}

void ComponentMain::handleCustomIED(const config::IEDSIM::sub::CustomIED& msg)
{
	_lg->setAtLocation(msg.location.x,msg.location.y,msg.location.z);
}
	

void ComponentMain::handleLocation(const config::IEDSIM::sub::Location& msg)
{
	if(_lg->isPoseWithinRadius(_lg->m_robot_x,_lg->m_robot_y,_lg->m_robot_z))
	{
		config::IEDSIM::pub::IEDLocation msg2;
		msg2.is_detected=1;
		double dx =_lg->m_x-_lg->m_robot_x;
		double dy =_lg->m_y-_lg->m_robot_y;

		msg2.location.x=dx*std::cos(_lg->m_robot_yaw)+dy*std::sin(_lg->m_robot_yaw);
		msg2.location.y=dy*std::cos(_lg->m_robot_yaw)-dx*std::sin(_lg->m_robot_yaw);
		msg2.location.z=_lg->m_z-_lg->m_robot_z;
		publishIEDLocation(msg2);
	}
}
	

void ComponentMain::publishIEDLocation(config::IEDSIM::pub::IEDLocation& msg)
{
	_pub_IEDLocation.publish(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame)
{
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame)
{
	tf::StampedTransform _tf;
	static tf::TransformListener listener;
	try {
	    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
	    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
	} catch (tf::TransformException& ex) {
	    ROS_ERROR("%s",ex.what());
	}
	return _tf;
}

void ComponentMain::publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report)
{
	diagnostic_msgs::DiagnosticArray msg;
	msg.status.push_back(_report);
	_pub_diagnostic.publish(msg);
}

void ComponentMain::publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
	msg.header = header;
	msg.status.push_back(_report);
	_pub_diagnostic.publish(msg);
}

void ComponentMain::heartbeat()
{
	using namespace boost::posix_time;
	ros::Publisher _pub = _nh.advertise<std_msgs::String>("/heartbeat", 10);
	double hz = HEARTBEAT_FREQUANCY;
	while(ros::ok())
	{
		boost::system_time stop_time = boost::get_system_time() + milliseconds((1/hz)*1000);
		std_msgs::String msg;
		msg.data = "IEDSIM";
		_pub.publish(msg);
	    boost::this_thread::sleep(stop_time);
	}
}

void ComponentMain::set_events(cognitao::bus::RosEventQueue* events){
	boost::mutex::scoped_lock l(_mt);
	_events = events;
}
void ComponentMain::rise_taskFinished(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/CompleteTask"));
}
void ComponentMain::rise_taskAborted(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/AbortTask"));
}
void ComponentMain::rise_taskStarted(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/TaskIsStarted"));
}
void ComponentMain::rise_taskPaused(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/TaskIsAborted"));
}
bool ComponentMain::isClosed() {
	return _events->is_closed();
}

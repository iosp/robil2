
/*
 * ComponentMain.cpp
 *
 *  Created on: Wednesday, 09. April 2014 08:18AM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include "../roscomm/RosComm.h"
ComponentMain::ComponentMain(int argc,char** argv)
{
	_events = 0;
	_roscomm = new RosComm(this,argc, argv);
	_lg=new IEDSimLogic;
}
ComponentMain::~ComponentMain() {
	if(_roscomm) delete _roscomm; _roscomm=0;
}

void ComponentMain::handleCustomIED(const config::IEDSIM::sub::CustomIED& msg)
{
	_lg->setAtLocation(msg.location.x,msg.location.y,msg.location.z);
}
	

void ComponentMain::handleLocation(const config::IEDSIM::sub::Location& msg)
{
	if(_lg->isPoseWithinRadius(_lg->m_robot_x,_lg->m_robot_y,_lg->m_robot_z))
	{
		config::IEDSIM::pub::IEDLocation msg2;
		msg2.is_detected=1;
		double dx =_lg->m_x-_lg->m_robot_x;
		double dy =_lg->m_y-_lg->m_robot_y;

		msg2.location.x=dx*std::cos(_lg->m_robot_yaw)+dy*std::sin(_lg->m_robot_yaw);
		msg2.location.y=dy*std::cos(_lg->m_robot_yaw)-dx*std::sin(_lg->m_robot_yaw);
		msg2.location.z=_lg->m_z-_lg->m_robot_z;
		publishIEDLocation(msg2);
	}
}
	

void ComponentMain::publishIEDLocation(config::IEDSIM::pub::IEDLocation& msg)
{
	_roscomm->publishIEDLocation(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	_roscomm->publishTransform(_tf, srcFrame, distFrame);
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame){
	return _roscomm->getLastTrasform(srcFrame, distFrame);
}
void ComponentMain::publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report){
	_roscomm->publishDiagnostic(_report);
}
void ComponentMain::publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report){
	_roscomm->publishDiagnostic(header, _report);
}

void ComponentMain::set_events(cognitao::bus::RosEventQueue* events){
	boost::mutex::scoped_lock l(_mt);
	_events = events;
}
void ComponentMain::rise_taskFinished(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/CompleteTask"));
}
void ComponentMain::rise_taskAborted(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/AbortTask"));
}
void ComponentMain::rise_taskStarted(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/TaskIsStarted"));
}
void ComponentMain::rise_taskPaused(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/TaskIsAborted"));
}


/*
 * ComponentMain.cpp
 *
 *  Created on: Thursday, 27. February 2014 12:29PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include "WsmTask.h"
#include <std_msgs/Float64.h>

#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>

ComponentMain::ComponentMain(int argc,char** argv)
: _inited(init(argc, argv))
{
_sub_WorkSeqData=ros::Subscriber(_nh.subscribe("/SMME/WSM/Task", 10, &ComponentMain::handleWorkSeqData,this));
_sub_BladePosition=ros::Subscriber(_nh.subscribe("/PER/BladPosition", 10, &ComponentMain::handleBladePosition,this));
_sub_MiniMapWSM=ros::Subscriber(_nh.subscribe("/PER/MiniMap", 10, &ComponentMain::handleMiniMapWSM,this));
_pub_WSMVelocity=ros::Publisher(_nh.advertise<geometry_msgs::TwistStamped>("/WSM/Speed",10));
_pub_BladePositionCommand=ros::Publisher(_nh.advertise<sensor_msgs::JointState>("/WSM/BladePosition",10));
_sub_Location=ros::Subscriber(_nh.subscribe("/LOC/Pose", 10, &ComponentMain::handleLocation,this));
_sub_PerVelocity=ros::Subscriber(_nh.subscribe("/LOC/Velocity", 10, &ComponentMain::handlePerVelocity,this));
_pub_diagnostic=ros::Publisher(_nh.advertise<diagnostic_msgs::DiagnosticArray>("/diagnostics",100));
_maintains.add_thread(new boost::thread(boost::bind(&ComponentMain::heartbeat,this)));
_plp_monitor=ros::Publisher(_nh.advertise<std_msgs::Header>("/monitor/task_time",100));
//	_blade_h = ros::Publisher(_nh.advertise<std_msgs::Float64>("/bladeh",100));
//	_Map_pub = ros::Publisher(_nh.advertise<std_msgs::Float64>("/groundh",100));

	//cur_mission = new WsmTask(this);
	this->cur_mission = NULL ;
	this->jointStates = NULL;
	this->receivedBladePosition = NULL;
	this->receivedWorkSeqData = NULL;
	this->receivedLocation = NULL;
	this->receivedPerVelocity = NULL;
    this->recivedMap = NULL;
    this->ground_heigth = 0 ;
    this->z_offset = 0;
}
ComponentMain::~ComponentMain() {
	if(cur_mission) delete cur_mission;
}

bool ComponentMain::init(int argc,char** argv){
	ros::init(argc,argv,"WSM_node");
	return true;
}

void ComponentMain::handleWorkSeqData(const robil_msgs::AssignManipulatorTask& msg)
{
	if(this->cur_mission != NULL)
	{
		ROS_INFO("get_new_problem");
		if((this->cur_mission->Get_Task_id()) == atoi(msg.task_id.c_str()))
				{
					ROS_ERROR("Rejected Task %s, WSM already has Task %d , at state '%s'",msg.task_id.c_str(),this->cur_mission->Get_Task_id(),this->cur_mission->Get_status().c_str());
					return;
				}
		else
		{
			/*
			if(this->cur_mission->Get_status() == "paused"){
				ROS_ERROR("Rejected Task %s, WSM already has Task %d , at state %s",msg.task_id.c_str(),this->cur_mission->Get_Task_id(),this->cur_mission->Get_status().c_str());
				return;
			}
			*/
			ROS_INFO("Delete old , allocate mew!");
				delete this->cur_mission ;
				this->cur_mission = new WsmTask(atoi(msg.task_id.c_str()),1,msg,this);
				return;
		}
	}
	else
	{
		ROS_INFO("allocate mew!");
		this->cur_mission = new WsmTask(atoi(msg.task_id.c_str()),0,msg,this);
		return;
	}
}
	
void ComponentMain::handleBladePosition(const sensor_msgs::JointState& msg)
{
	if(this->receivedBladePosition != NULL)
		delete this->receivedBladePosition;
	this->receivedBladePosition = new sensor_msgs::JointState(msg);
	//std::cout<< "WSM say:" << msg << std::endl;
}

void ComponentMain::handleLocation(const geometry_msgs::PoseWithCovarianceStamped& msg)
{

	if(this->receivedLocation != NULL)
		delete this->receivedLocation;
	this->receivedLocation = new geometry_msgs::PoseWithCovarianceStamped(msg);
	//std::cout<< "LLC say:" << msg.pose.pose.position.x << std::endl;
}

void ComponentMain::handlePerVelocity(const geometry_msgs::TwistStamped& msg)
{

	if(this->receivedPerVelocity != NULL)
		delete this->receivedPerVelocity;
	this->receivedPerVelocity = new geometry_msgs::TwistStamped(msg);

//	std::cout<< "LLC say:" << msg << std::endl;
}

void ComponentMain::handleMiniMapWSM(const robil_msgs::Map& msg)
{

	if(this->recivedMap != NULL){
		delete this->recivedMap ;
	}
		this->recivedMap = new robil_msgs::Map(msg);

			//double max = 0 ;
	//	for(int i = 12 ; i < 18 ; i++)
	//	{
		//	std::cout << "[" << this->recivedMap->data[45*30 + i].height << "]" ;
	//		if(this->recivedMap->data[45*30 + i].height > max)
	//		{
		//		max = this->recivedMap->data[3*30 + i].height;
	///		}
	//	}
//	std::cout << std::endl ;
//	this->ground_heigth = max;

}

void ComponentMain::publish_monitor_time(const std_msgs::Header& msg)
{
	_plp_monitor.publish(msg);
}
/*
void ComponentMain::publish_h(const std_msgs::Float64 &msg)
{
	_roscomm->publish_h(msg);
}

void ComponentMain::publish_m(const std_msgs::Float64 &msg)
{
	_roscomm->publish_m(msg);
}
*/
void ComponentMain::publishWSMVelocity(geometry_msgs::TwistStamped& msg)
{
	_pub_WSMVelocity.publish(msg);
}
	
void ComponentMain::publishBladePositionCommand(sensor_msgs::JointState& msg)
{
	_pub_BladePositionCommand.publish(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform ComponentMain::getLastTransform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
		static tf::TransformListener listener;
		try {
		    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
		    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
		} catch (tf::TransformException& ex) {
		    ROS_ERROR("%s",ex.what());
		}
		return _tf;
}
void ComponentMain::publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
		msg.status.push_back(_report);
		_pub_diagnostic.publish(msg);
}
void ComponentMain::publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
		msg.header = header;
		msg.status.push_back(_report);
		_pub_diagnostic.publish(msg);
}
void ComponentMain::heartbeat(){
	using namespace boost::posix_time;
	ros::Publisher _pub = _nh.advertise<std_msgs::String>("/heartbeat", 10);
	double hz = HEARTBEAT_FREQUANCY;
	while(ros::ok()){
		boost::system_time stop_time = boost::get_system_time() + milliseconds((1/hz)*1000);
		std_msgs::String msg;
		msg.data = "WSM";
		_pub.publish(msg);
	    boost::this_thread::sleep(stop_time);
	}
}

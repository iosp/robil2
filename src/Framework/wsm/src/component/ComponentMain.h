
/*
 * ComponentMain.h
 *
 *  Created on: Thursday, 27. February 2014 12:29PM
 *      Author: autogenerated
 */
#ifndef COMPONENTMAIN_H_
#define COMPONENTMAIN_H_
#include <std_msgs/String.h>
#include <tf/tf.h>
#include <cognitao_v2/cognitao_v2.h>
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>

#include <boost/thread.hpp>

#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <geometry_msgs/TwistStamped.h>
#include <sensor_msgs/JointState.h>
#include <diagnostic_msgs/DiagnosticArray.h>
#include <robil_msgs/Map.h>
#include <robil_msgs/AssignManipulatorTask.h>

class WsmTask;

class ComponentMain {

	bool _inited;
	ros::NodeHandle _nh;
	ros::Publisher _pub_diagnostic;
	boost::thread_group _maintains;
	ros::Subscriber _sub_WorkSeqData;
	ros::Subscriber _sub_BladePosition;
	ros::Publisher  _pub_WSMVelocity;
	ros::Publisher  _pub_BladePositionCommand;
	ros::Subscriber _sub_Location;
	ros::Subscriber _sub_PerVelocity;
	ros::Subscriber _sub_MiniMapWSM;
	ros::Publisher _plp_monitor;
	//	ros::Publisher _blade_h;
	//	ros::Publisher _Map_pub;
	bool init(int argc,char** argv);
	cognitao::bus::RosEventQueue* _events;
	boost::mutex _mt;

public:
	WsmTask* cur_mission;
	robil_msgs::AssignManipulatorTask * receivedWorkSeqData;
	sensor_msgs::JointState * receivedBladePosition;
	geometry_msgs::PoseWithCovarianceStamped * receivedLocation;
	geometry_msgs::TwistStamped * receivedPerVelocity;
	robil_msgs::Map *recivedMap;
	sensor_msgs::JointState *jointStates;
	double ground_heigth;
	double z_offset ;

	ComponentMain(int argc,char** argv);
	virtual ~ComponentMain();
	void handleWorkSeqData(const robil_msgs::AssignManipulatorTask& msg);
	void handleBladePosition(const sensor_msgs::JointState& msg);
	void publishWSMVelocity(geometry_msgs::TwistStamped& msg);
	void publishBladePositionCommand(sensor_msgs::JointState& msg);
	void handleLocation(const geometry_msgs::PoseWithCovarianceStamped& msg);
	void handlePerVelocity(const geometry_msgs::TwistStamped &msg);
	void handleMiniMapWSM(const robil_msgs::Map& msg);
	void publish_monitor_time(const std_msgs::Header& msg);
	void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
	tf::StampedTransform getLastTransform(std::string srcFrame, std::string distFrame);
	void publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report);
	void publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report);
	void heartbeat();
	void set_events(cognitao::bus::RosEventQueue* events);
	void rise_taskFinished();
	void rise_taskAborted();
	void rise_taskStarted();
	void rise_taskPaused();
	bool isClosed();
	cognitao::bus::RosEventQueue* events(){return _events;}
};

#endif /* COMPONENTMAIN_H_ */

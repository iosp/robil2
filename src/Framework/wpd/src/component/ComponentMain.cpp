
/*
 * ComponentMain.cpp
 *
 *  Created on: Thursday, 27. February 2014 12:29PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include "MoveBase.h"

ComponentMain::ComponentMain(int argc,char** argv): _inited(init(argc, argv)), _events(0)
{
	_sub_LocalPath=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WPD","LocalPath","sub"), 10, &ComponentMain::handleLocalPath,this));
	_sub_MiniMap=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WPD","MiniMap","sub"), 10, &ComponentMain::handleMiniMap,this));
	_sub_Location=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"WPD","Location","sub"), 10, &ComponentMain::handleLocation,this));
	_pub_WPDVelocity=ros::Publisher(_nh.advertise<config::WPD::pub::WPDVelocity>(fetchParam(&_nh,"WPD","WPDVelocity","pub"),10));
	_pub_diagnostic=ros::Publisher(_nh.advertise<diagnostic_msgs::DiagnosticArray>("/diagnostics",100));
	_maintains.add_thread(new boost::thread(boost::bind(&ComponentMain::heartbeat,this)));

	_move_base = new MoveBase(this);
}
ComponentMain::~ComponentMain() {

	if(_move_base) delete _move_base; _move_base=0;
}

bool ComponentMain::init(int argc,char** argv){
	ros::init(argc,argv,"WPD_node");
	return true;
}

void ComponentMain::handleLocalPath(const config::WPD::sub::LocalPath& msg) {
	//std::cout<< "WPD say:" << msg << std::endl;
}
	

void ComponentMain::handleMiniMap(const config::WPD::sub::MiniMap& msg) {
	//std::cout<< "WPD say:" << msg << std::endl;
}
	

void ComponentMain::handleLocation(const config::WPD::sub::Location& msg) {
	_move_base->on_position_update(msg);
}
	

void ComponentMain::publishWPDVelocity(config::WPD::pub::WPDVelocity& msg)
{
	_pub_WPDVelocity.publish(msg);
}

void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
		br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform ComponentMain::getLastTransform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
		static tf::TransformListener listener;
		try {
		    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
		    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
		} catch (tf::TransformException& ex) {
		    ROS_ERROR("%s",ex.what());
		}
		return _tf;
}
void ComponentMain::publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
		msg.status.push_back(_report);
		_pub_diagnostic.publish(msg);
}
void ComponentMain::publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
		msg.header = header;
		msg.status.push_back(_report);
		_pub_diagnostic.publish(msg);
}
void ComponentMain::heartbeat(){
	using namespace boost::posix_time;
	ros::Publisher _pub = _nh.advertise<std_msgs::String>("/heartbeat", 10);
	double hz = HEARTBEAT_FREQUANCY;
	while(ros::ok()){
		boost::system_time stop_time = boost::get_system_time() + milliseconds((1/hz)*1000);
		std_msgs::String msg;
		msg.data = "WPD";
		_pub.publish(msg);
	    boost::this_thread::sleep(stop_time);
	}
}

void ComponentMain::set_events(cognitao::bus::RosEventQueue* events) {
	boost::mutex::scoped_lock l(_mt);
	_events = events;
}
void ComponentMain::rise_taskFinished() {
	boost::mutex::scoped_lock l(_mt);
	if (not _events)
		return;
	_events->rise(cognitao::bus::Event("/CompleteTask"));
}
void ComponentMain::rise_taskAborted() {
	boost::mutex::scoped_lock l(_mt);
	if (not _events)
		return;
	_events->rise(cognitao::bus::Event("/AbortTask"));
}
void ComponentMain::rise_taskStarted() {
	boost::mutex::scoped_lock l(_mt);
	if (not _events)
		return;
	_events->rise(cognitao::bus::Event("/TaskIsStarted"));
}
void ComponentMain::rise_taskPaused() {
	boost::mutex::scoped_lock l(_mt);
	if (not _events)
		return;
	_events->rise(cognitao::bus::Event("/TaskIsPaused"));
}
bool ComponentMain::isClosed() {
//	ROS_INFO_STREAM("events = " << _events);
//	if(_events != NULL)
		return _events->is_closed();
//	return false;
}

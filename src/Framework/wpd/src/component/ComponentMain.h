/*
 * ComponentMain.h
 *
 *  Created on: Thursday, 27. February 2014 12:29PM
 *      Author: autogenerated
 */
#ifndef COMPONENTMAIN_H_
#define COMPONENTMAIN_H_
#include <std_msgs/String.h>
#include <ParameterTypes.h>
#include <tf/tf.h>
<<<<<<< HEAD
#include <ros/ros.h>

#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>

#include <boost/thread.hpp>

=======
#include <cognitao_v2/cognitao_v2.h>

class RosComm;
>>>>>>> origin/moving_to_new_cognitao
class MoveBase;
class ComponentMain {
	bool _inited;

	  ros::NodeHandle _nh;
	  ros::Publisher _pub_diagnostic;
	  boost::thread_group _maintains;
		ros::Subscriber _sub_LocalPath;
		ros::Subscriber _sub_MiniMap;
		ros::Subscriber _sub_Location;
		ros::Publisher  _pub_WPDVelocity;

	  bool init(int argc,char** argv);

	MoveBase* _move_base;
	cognitao::bus::RosEventQueue* _events;
	boost::mutex _mt;
public:
	ComponentMain(int argc, char** argv);
	virtual ~ComponentMain();
	void handleLocalPath(const config::WPD::sub::LocalPath& msg);
	void handleMiniMap(const config::WPD::sub::MiniMap& msg);
	void handleLocation(const config::WPD::sub::Location& msg);
	void publishWPDVelocity(config::WPD::pub::WPDVelocity& msg);
<<<<<<< HEAD
	void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
	tf::StampedTransform getLastTransform(std::string srcFrame, std::string distFrame);
	void publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report);
	void publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report);
	void heartbeat();
=======
	void publishTransform(const tf::Transform& _tf, std::string srcFrame,
			std::string distFrame);
	tf::StampedTransform getLastTrasform(std::string srcFrame,
			std::string distFrame);
	void publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report);
	void publishDiagnostic(const std_msgs::Header& header,
			const diagnostic_msgs::DiagnosticStatus& _report);
	void set_events(cognitao::bus::RosEventQueue* events);
	void rise_taskFinished();
	void rise_taskAborted();
	void rise_taskStarted();
	void rise_taskPaused();
	bool isClosed();
	cognitao::bus::RosEventQueue* events(){return _events;}
>>>>>>> origin/moving_to_new_cognitao
};
#endif /* COMPONENTMAIN_H_ */

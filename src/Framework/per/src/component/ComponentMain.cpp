
/*
 * ComponentMain.cpp
 *
 *  Created on: Thursday, 27. February 2014 12:29PM
 *      Author: autogenerated
 */
#include "ComponentMain.h"
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <std_msgs/Bool.h>
#include "../roscomm/RosComm.h"
#include "heightmap.h"
//#include "heightmap_projection.h"
#include "helpermath.h"
#include "mapper/mapper.h"
#include "rdbg.h"
#include "per/configConfig.h"
using namespace std; 
typedef string String;
typedef bool boolean;



ComponentMain::ComponentMain(int argc,char** argv)
{
	 _roscomm = new RosComm(this,argc, argv);
	 Mapper::roscomm = _roscomm;
     boost::thread mapper(Mapper::MainLoop, &this->_dyn_conf);
	 boost::this_thread::sleep(boost::posix_time::milliseconds(300));
	 boost::thread mapper2(Mapper::VisualizeLoop);
	 /// walrus func:
	  boost::this_thread::sleep(boost::posix_time::milliseconds(300));
	 //boost::thread mapper3(Mapper::StereoThread);
	 //boost::this_thread::sleep(boost::posix_time::milliseconds(300));

	  _events = 0;
}
ComponentMain::~ComponentMain() {
	if(_roscomm) delete _roscomm; _roscomm=0;
}

void ComponentMain::handleLocation(const config::PER::sub::Location& msg)
{
  Mapper::handleLocation(msg);
}


void ComponentMain::setVisualize(char flags)
{
  Mapper::setVisualize((unsigned char)flags);
}

void ComponentMain::handlePerVelocity(const config::PER::sub::PerVelocity& msg)
{
}
	

void ComponentMain::handleSensorINS(const config::PER::sub::SensorINS& msg)
{
	_imuData = msg;
	config::PER::pub::INS msg2;
	msg2 = msg;
	publishINS(msg2);	
}
	

void ComponentMain::handleSensorGPS(const config::PER::sub::SensorGPS& msg)
{
	_gpsData = msg;
	config::PER::pub::GPS msg2;
	msg2 = msg;
	publishGPS(msg2);
}
	

void ComponentMain::handleSensorCamL(const config::PER::sub::SensorCamL& msg)
{
  Mapper::handleCamL(msg);
}
	

void ComponentMain::handleSensorCamR(const config::PER::sub::SensorCamR& msg)
{
  Mapper::handleCamR(msg);
}
	

void ComponentMain::handleSensorWire(const config::PER::sub::SensorWire& msg)
{
  //rdbg("wire");
}
	

void ComponentMain::handleSensorSICK1(const config::PER::sub::SensorSICK1& msg)
{
  Mapper::handleSickR(msg);
}
void ComponentMain::handleSensorSICK2(const config::PER::sub::SensorSICK2& msg)
{
  
  Mapper::handleSickL(msg);
}
	

void ComponentMain::handleSensorIBEO(const config::PER::sub::SensorIBEO& msg)
{
  int check=0; 
  ros::param::param("/LOC/Ready",check,0);
  if(!check) return;
  Mapper::handleIBEO(msg);
}
	


void ComponentMain::handleEffortsTh(const config::PER::sub::EffortsTh& msg)
{
	//std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleEffortsSt(const config::PER::sub::EffortsSt& msg)
{
	//std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::handleEffortsJn(const config::PER::sub::EffortsJn& msg)
{
	//std::cout<< "PER say:" << msg << std::endl;
}
	

void ComponentMain::publishGPS(config::PER::pub::GPS& msg)
{
	msg = _gpsData;
	//std::cout << "publishing: " << msg << std::endl;
	_roscomm->publishGPS(msg);
}
	

void ComponentMain::publishINS(config::PER::pub::INS& msg)
{
	msg = _imuData;
	_roscomm->publishINS(msg);
}
	

void ComponentMain::publishBladePosition(config::PER::pub::BladePosition& msg)
{
	_roscomm->publishBladePosition(msg);
}
	

void ComponentMain::publishMap(config::PER::pub::Map& msg)
{
  
}
	

void ComponentMain::publishMiniMap(config::PER::pub::MiniMap& msg)
{
   
}
	

void ComponentMain::publishVOOdometry(config::PER::pub::VOOdometry& msg)
{
	_roscomm->publishVOOdometry(msg);
}
	
void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	_roscomm->publishTransform(_tf, srcFrame, distFrame);
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame){
	return _roscomm->getLastTrasform(srcFrame, distFrame);
}
void ComponentMain::publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report){
	_roscomm->publishDiagnostic(_report);
}
void ComponentMain::publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report){
	_roscomm->publishDiagnostic(header, _report);
}

void ComponentMain::handleGpsSpeed(const config::PER::sub::SensorGpsSpeed& msg)
{
	config::PER::pub::PerGpsSpeed msg2;
	msg2 = msg;
	publishGpsSpeed(msg2);
}

void ComponentMain::publishGpsSpeed(config::PER::pub::PerGpsSpeed& msg)
{
	_roscomm->publishGpsSpeed(msg);
}

void ComponentMain::set_events(cognitao::bus::RosEventQueue* events){
	boost::mutex::scoped_lock l(_mt);
	_events = events;
}
void ComponentMain::rise_taskFinished(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/CompleteTask"));
}
void ComponentMain::rise_taskAborted(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/AbortTask"));
}
void ComponentMain::rise_taskStarted(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/TaskIsStarted"));
}
void ComponentMain::rise_taskPaused(){
	boost::mutex::scoped_lock l(_mt);
	if(not _events) return;
	_events->rise(cognitao::bus::Event("/TaskIsAborted"));
}

/**
 * Walrus Changes:
 */
void ComponentMain::setLanes(Mat m)
{
  Mapper::setLanes(m);
}

void ComponentMain::configCallback(per::configConfig &config, uint32_t level)
{
  // Set class variables to new values. They should match what is input at the dynamic reconfigure GUI.
    _dyn_conf = config;
    char flags = 0;
    if (config.heightMap)
        flags += 1;
    if (config.typeMap)
        flags += 8;
    Mapper::setVisualize((unsigned char)flags);
}


/*
 * RosComm.cpp
 *
 *  Created on: Tuesday, 25. February 2014 12:20PM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{
	_sub_Location=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","Location","sub"), 10, &RosComm::LocationCallback,this));
	_sub_PerVelocity=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","PerVelocity","sub"), 10, &RosComm::PerVelocityCallback,this));
	_sub_SensorINS=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","SensorINS","sub"), 10, &RosComm::SensorINSCallback,this));
	_sub_SensorGPS=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","SensorGPS","sub"), 10, &RosComm::SensorGPSCallback,this));
	_sub_SensorCamL=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","SensorCamL","sub"), 10, &RosComm::SensorCamLCallback,this));
	_sub_SensorCamR=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","SensorCamR","sub"), 10, &RosComm::SensorCamRCallback,this));
	_sub_SensorWire=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","SensorWire","sub"), 10, &RosComm::SensorWireCallback,this));
	_sub_SensorSICK=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","SensorSICK","sub"), 10, &RosComm::SensorSICKCallback,this));
	_sub_SensorIBEO1=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","SensorIBEO1","sub"), 10, &RosComm::SensorIBEO1Callback,this));
	_sub_SensorIBEO2=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","SensorIBEO2","sub"), 10, &RosComm::SensorIBEO2Callback,this));
	_sub_SensorIBEO3=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","SensorIBEO3","sub"), 10, &RosComm::SensorIBEO3Callback,this));
	_sub_SensorIBEO4=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","SensorIBEO4","sub"), 10, &RosComm::SensorIBEO4Callback,this));
	_sub_EffortsTh=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","EffortsTh","sub"), 10, &RosComm::EffortsThCallback,this));
	_sub_EffortsSt=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","EffortsSt","sub"), 10, &RosComm::EffortsStCallback,this));
	_sub_EffortsJn=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"PER","EffortsJn","sub"), 10, &RosComm::EffortsJnCallback,this));
	_pub_GPS=ros::Publisher(_nh.advertise<config::PER::pub::GPS>(fetchParam(&_nh,"PER","GPS","pub"),10));
	_pub_INS=ros::Publisher(_nh.advertise<config::PER::pub::INS>(fetchParam(&_nh,"PER","INS","pub"),10));
	_pub_BladePosition=ros::Publisher(_nh.advertise<config::PER::pub::BladePosition>(fetchParam(&_nh,"PER","BladePosition","pub"),10));
	_pub_Map=ros::Publisher(_nh.advertise<config::PER::pub::Map>(fetchParam(&_nh,"PER","Map","pub"),10));
	_pub_MiniMap=ros::Publisher(_nh.advertise<config::PER::pub::MiniMap>(fetchParam(&_nh,"PER","MiniMap","pub"),10));
	_pub_VOOdometry=ros::Publisher(_nh.advertise<config::PER::pub::VOOdometry>(fetchParam(&_nh,"PER","VOOdometry","pub"),10));
	_pub_diagnostic=ros::Publisher(_nh.advertise<diagnostic_msgs::DiagnosticArray>("/diagnostics",100));
	_maintains.add_thread(new boost::thread(boost::bind(&RosComm::heartbeat,this)));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"PER_node");
	return true;
}


void RosComm::LocationCallback(const config::PER::sub::Location::ConstPtr &msg)
{
	_comp->handleLocation(*msg);
}
	

void RosComm::PerVelocityCallback(const config::PER::sub::PerVelocity::ConstPtr &msg)
{
	_comp->handlePerVelocity(*msg);
}
	

void RosComm::SensorINSCallback(const config::PER::sub::SensorINS::ConstPtr &msg)
{
	_comp->handleSensorINS(*msg);
}
	

void RosComm::SensorGPSCallback(const config::PER::sub::SensorGPS::ConstPtr &msg)
{
	_comp->handleSensorGPS(*msg);
}
	

void RosComm::SensorCamLCallback(const config::PER::sub::SensorCamL::ConstPtr &msg)
{
	_comp->handleSensorCamL(*msg);
}
	

void RosComm::SensorCamRCallback(const config::PER::sub::SensorCamR::ConstPtr &msg)
{
	_comp->handleSensorCamR(*msg);
}
	

void RosComm::SensorWireCallback(const config::PER::sub::SensorWire::ConstPtr &msg)
{
	_comp->handleSensorWire(*msg);
}
	

void RosComm::SensorSICKCallback(const config::PER::sub::SensorSICK::ConstPtr &msg)
{
	_comp->handleSensorSICK(*msg);
}
	

void RosComm::SensorIBEO1Callback(const config::PER::sub::SensorIBEO1::ConstPtr &msg)
{
	_comp->handleSensorIBEO1(*msg);
}
	

void RosComm::SensorIBEO2Callback(const config::PER::sub::SensorIBEO2::ConstPtr &msg)
{
	_comp->handleSensorIBEO2(*msg);
}
	

void RosComm::SensorIBEO3Callback(const config::PER::sub::SensorIBEO3::ConstPtr &msg)
{
	_comp->handleSensorIBEO3(*msg);
}
	

void RosComm::SensorIBEO4Callback(const config::PER::sub::SensorIBEO4::ConstPtr &msg)
{
	_comp->handleSensorIBEO4(*msg);
}
	

void RosComm::EffortsThCallback(const config::PER::sub::EffortsTh::ConstPtr &msg)
{
	_comp->handleEffortsTh(*msg);
}
	

void RosComm::EffortsStCallback(const config::PER::sub::EffortsSt::ConstPtr &msg)
{
	_comp->handleEffortsSt(*msg);
}
	

void RosComm::EffortsJnCallback(const config::PER::sub::EffortsJn::ConstPtr &msg)
{
	_comp->handleEffortsJn(*msg);
}
	

void RosComm::publishGPS( config::PER::pub::GPS &msg)
{
	_pub_GPS.publish(msg);
}
	

void RosComm::publishINS( config::PER::pub::INS &msg)
{
	_pub_INS.publish(msg);
}
	

void RosComm::publishBladePosition( config::PER::pub::BladePosition &msg)
{
	_pub_BladePosition.publish(msg);
}
	

void RosComm::publishMap( config::PER::pub::Map &msg)
{
	_pub_Map.publish(msg);
}
	

void RosComm::publishMiniMap( config::PER::pub::MiniMap &msg)
{
	_pub_MiniMap.publish(msg);
}
	

void RosComm::publishVOOdometry( config::PER::pub::VOOdometry &msg)
{
	_pub_VOOdometry.publish(msg);
}
	
void RosComm::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform RosComm::getLastTrasform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
	static tf::TransformListener listener;
	try {
	    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
	    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
	} catch (tf::TransformException& ex) {
	    ROS_ERROR("%s",ex.what());
	}
	return _tf;
}
void RosComm::publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
	msg.status.push_back(_report);
	_pub_diagnostic.publish(msg);
}
void RosComm::publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
	msg.header = header;
	msg.status.push_back(_report);
	_pub_diagnostic.publish(msg);
}
void RosComm::heartbeat(){
	using namespace boost::posix_time;
	ros::Publisher _pub = _nh.advertise<std_msgs::String>("/heartbeat", 10);
	double hz = HEARTBEAT_FREQUANCY;
	while(ros::ok()){
		boost::system_time stop_time = boost::get_system_time() + milliseconds((1/hz)*1000);
		std_msgs::String msg;
		msg.data = "PER";
		_pub.publish(msg);
	    boost::this_thread::sleep(stop_time);
	}
}

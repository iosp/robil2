
/*
 * ComponentMain.h
 *
 *  Created on: Thursday, 27. February 2014 12:29PM
 *      Author: autogenerated
 */
#ifndef COMPONENTMAIN_H_
#define COMPONENTMAIN_H_
#include <std_msgs/String.h>
#include <tf/tf.h>
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <boost/thread.hpp>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <diagnostic_msgs/DiagnosticArray.h>
#include <robil_msgs/Path.h>
#include <robil_msgs/IEDLocation.h>
#include <robil_msgs/Map.h>
#include <robil_msgs/AssignManipulatorTask.h>
#include <robil_msgs/AssignMission.h>
#include <robil_msgs/AssignNavTask.h>
#include <robil_msgs/MissionAcceptance.h>
#include <sensor_msgs/JointState.h>
#include <geometry_msgs/TwistStamped.h>


#ifndef HEARTBEAT_FREQUANCY
#define HEARTBEAT_FREQUANCY 2 //Hz
#endif

#ifndef HEARTBEAT_FREQUENCY
#define HEARTBEAT_FREQUENCY 2 //Hz
#endif


class ComponentMain {
	bool _inited;
	  ComponentMain   * _comp;
	  ros::NodeHandle _nh;
	  ros::Publisher _pub_diagnostic;
	  boost::thread_group _maintains;
		ros::Subscriber _sub_IEDLocation;
		ros::Subscriber _sub_MissionAcceptance;
		ros::Subscriber _sub_LocalPath;
		ros::Subscriber _sub_BladePosition;
		ros::Subscriber _sub_Map;
		ros::Subscriber _sub_Location;
		ros::Subscriber _sub_PerVelocity;
		ros::Publisher  _pub_CustomIED;
		ros::Publisher  _pub_PositionUpdate;
		ros::Publisher  _pub_AssignNavTask;
		ros::Publisher  _pub_AssignManTask;
		ros::Publisher  _pub_AssignMission;

	  bool init(int argc,char** argv);
public:
	ComponentMain(int argc,char** argv);
	virtual ~ComponentMain();
	void handleIEDLocation(const robil_msgs::IEDLocation& msg);
	void handleMissionAcceptance(const robil_msgs::MissionAcceptance& msg);
	void handleLocalPath(const robil_msgs::Path& msg);
	void handleBladePosition(const sensor_msgs::JointState& msg);
	void handleMap(const robil_msgs::Map& msg);
	void handleLocation(const geometry_msgs::PoseWithCovarianceStamped& msg);
	void handlePerVelocity(const geometry_msgs::TwistStamped& msg);
	void publishCustomIED(robil_msgs::IEDLocation& msg);
	void publishPositionUpdate(geometry_msgs::PoseStamped& msg);
	void publishAssignNavTask(robil_msgs::AssignNavTask& msg);
	void publishAssignManTask(robil_msgs::AssignManipulatorTask& msg);
	void publishAssignMission(robil_msgs::AssignMission& msg);
	void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
	tf::StampedTransform getLastTransform(std::string srcFrame, std::string distFrame);
	void publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report);
	void publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report);
	void heartbeat();
};
#endif /* COMPONENTMAIN_H_ */

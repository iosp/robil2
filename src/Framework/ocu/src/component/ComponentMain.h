
/*
 * ComponentMain.h
 *
 *  Created on: Thursday, 27. February 2014 12:29PM
 *      Author: autogenerated
 */
#ifndef COMPONENTMAIN_H_
#define COMPONENTMAIN_H_
#include <std_msgs/String.h>
#include <ParameterTypes.h>
#include <tf/tf.h>
<<<<<<< HEAD
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <boost/thread.hpp>


class ComponentMain {
	bool _inited;
	  ComponentMain   * _comp;
	  ros::NodeHandle _nh;
	  ros::Publisher _pub_diagnostic;
	  boost::thread_group _maintains;
		ros::Subscriber _sub_IEDLocation;
		ros::Subscriber _sub_MissionAcceptance;
		ros::Subscriber _sub_LocalPath;
		ros::Subscriber _sub_BladePosition;
		ros::Subscriber _sub_Map;
		ros::Subscriber _sub_Location;
		ros::Subscriber _sub_PerVelocity;
		ros::Publisher  _pub_CustomIED;
		ros::Publisher  _pub_PositionUpdate;
		ros::Publisher  _pub_AssignNavTask;
		ros::Publisher  _pub_AssignManTask;
		ros::Publisher  _pub_AssignMission;

	  bool init(int argc,char** argv);
=======
#include <cognitao_v2/cognitao_v2.h>
class RosComm;
class ComponentMain {
	RosComm* _roscomm;
	cognitao::bus::RosEventQueue* _events;
	boost::mutex _mt;
>>>>>>> origin/moving_to_new_cognitao
public:
	ComponentMain(int argc,char** argv);
	virtual ~ComponentMain();
	void handleIEDLocation(const config::OCU::sub::IEDLocation& msg);
	void handleMissionAcceptance(const config::OCU::sub::MissionAcceptance& msg);
	void handleLocalPath(const config::OCU::sub::LocalPath& msg);
	void handleBladePosition(const config::OCU::sub::BladePosition& msg);
	void handleMap(const config::OCU::sub::Map& msg);
	void handleLocation(const config::OCU::sub::Location& msg);
	void handlePerVelocity(const config::OCU::sub::PerVelocity& msg);
	void publishCustomIED(config::OCU::pub::CustomIED& msg);
	void publishPositionUpdate(config::OCU::pub::PositionUpdate& msg);
	void publishAssignNavTask(config::OCU::pub::AssignNavTask& msg);
	void publishAssignManTask(config::OCU::pub::AssignManTask& msg);
	void publishAssignMission(config::OCU::pub::AssignMission& msg);
	void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
	tf::StampedTransform getLastTransform(std::string srcFrame, std::string distFrame);
	void publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report);
	void publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report);
<<<<<<< HEAD
	void heartbeat();
=======

	void set_events(cognitao::bus::RosEventQueue* events);
	void rise_taskFinished();
	void rise_taskAborted();
	void rise_taskStarted();
	void rise_taskPaused();
	bool isClosed();

>>>>>>> origin/moving_to_new_cognitao
};
#endif /* COMPONENTMAIN_H_ */

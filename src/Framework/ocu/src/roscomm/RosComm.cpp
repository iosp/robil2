
/*
 * RosComm.cpp
 *
 *  Created on: Sunday, 02. February 2014 10:15AM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{
	_sub_PosAttVel=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"OCU","PosAttVel","sub"), 10, &RosComm::PosAttVelCallback,this));
	_sub_StatusData=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"OCU","StatusData","sub"), 10, &RosComm::StatusDataCallback,this));
	_sub_MissionStatus=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"OCU","MissionStatus","sub"), 10, &RosComm::MissionStatusCallback,this));
	_sub_Map=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"OCU","Map","sub"), 10, &RosComm::MapCallback,this));
	_sub_LocalPathPlan=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"OCU","LocalPathPlan","sub"), 10, &RosComm::LocalPathPlanCallback,this));
	_sub_IEDDetectionEvent=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"OCU","IEDDetectionEvent","sub"), 10, &RosComm::IEDDetectionEventCallback,this));
	_sub_IEDLocation=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"OCU","IEDLocation","sub"), 10, &RosComm::IEDLocationCallback,this));
	_pub_PositionUpdate=ros::Publisher(_nh.advertise<config::OCU::pub::PositionUpdate>(fetchParam(&_nh,"OCU","PositionUpdate","pub"),10));
	_pub_MissionPlan=ros::Publisher(_nh.advertise<config::OCU::pub::MissionPlan>(fetchParam(&_nh,"OCU","MissionPlan","pub"),10));
	_pub_Teleoperation=ros::Publisher(_nh.advertise<config::OCU::pub::Teleoperation>(fetchParam(&_nh,"OCU","Teleoperation","pub"),10));
	_pub_IEDDetectionEvent=ros::Publisher(_nh.advertise<config::OCU::pub::IEDDetectionEvent>(fetchParam(&_nh,"OCU","IEDDetectionEvent","pub"),10));
	_pub_IEDLocation=ros::Publisher(_nh.advertise<config::OCU::pub::IEDLocation>(fetchParam(&_nh,"OCU","IEDLocation","pub"),10));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"OCU_node");
	return true;
}


void RosComm::PosAttVelCallback(const config::OCU::sub::PosAttVel::ConstPtr &msg)
{
	_comp->handlePosAttVel(*msg);
}
	

void RosComm::StatusDataCallback(const config::OCU::sub::StatusData::ConstPtr &msg)
{
	_comp->handleStatusData(*msg);
}
	

void RosComm::MissionStatusCallback(const config::OCU::sub::MissionStatus::ConstPtr &msg)
{
	_comp->handleMissionStatus(*msg);
}
	

void RosComm::MapCallback(const config::OCU::sub::Map::ConstPtr &msg)
{
	_comp->handleMap(*msg);
}
	

void RosComm::LocalPathPlanCallback(const config::OCU::sub::LocalPathPlan::ConstPtr &msg)
{
	_comp->handleLocalPathPlan(*msg);
}
	

void RosComm::IEDDetectionEventCallback(const config::OCU::sub::IEDDetectionEvent::ConstPtr &msg)
{
	_comp->handleIEDDetectionEvent(*msg);
}
	

void RosComm::IEDLocationCallback(const config::OCU::sub::IEDLocation::ConstPtr &msg)
{
	_comp->handleIEDLocation(*msg);
}
	

void RosComm::publishPositionUpdate( config::OCU::pub::PositionUpdate &msg)
{
	_pub_PositionUpdate.publish(msg);
}
	

void RosComm::publishMissionPlan( config::OCU::pub::MissionPlan &msg)
{
	_pub_MissionPlan.publish(msg);
}
	

void RosComm::publishTeleoperation( config::OCU::pub::Teleoperation &msg)
{
	_pub_Teleoperation.publish(msg);
}
	

void RosComm::publishIEDDetectionEvent( config::OCU::pub::IEDDetectionEvent &msg)
{
	_pub_IEDDetectionEvent.publish(msg);
}
	

void RosComm::publishIEDLocation( config::OCU::pub::IEDLocation &msg)
{
	_pub_IEDLocation.publish(msg);
}
	

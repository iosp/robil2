
/*
 * RosComm.h
 *
 *  Created on: Tuesday, 25. February 2014 12:20PM
 *      Author: autogenerated
 */
#ifndef ROSCOMM_H_
#define ROSCOMM_H_
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include <ParameterTypes.h>
#include <tf/tf.h>
#include <boost/thread.hpp>
class ComponentMain;
class RosComm {
  bool _inited;
  ComponentMain   * _comp;
  ros::NodeHandle _nh;
  ros::Publisher _pub_diagnostic;
  boost::thread_group _maintains;
	ros::Subscriber _sub_IEDLocation;
	ros::Subscriber _sub_MissionAcceptance;
	ros::Subscriber _sub_LocalPath;
	ros::Subscriber _sub_BladePosition;
	ros::Subscriber _sub_Map;
	ros::Subscriber _sub_Location;
	ros::Subscriber _sub_PerVelocity;
	ros::Publisher  _pub_CustomIED;
	ros::Publisher  _pub_PositionUpdate;
	ros::Publisher  _pub_AssignNavTask;
	ros::Publisher  _pub_AssignManTask;
	ros::Publisher  _pub_AssignMission;

  bool init(int argc,char** argv);
public:
	RosComm(ComponentMain* comp,int argc,char** argv);
	virtual ~RosComm();
	void IEDLocationCallback(const config::OCU::sub::IEDLocation::ConstPtr &msg);
	void MissionAcceptanceCallback(const config::OCU::sub::MissionAcceptance::ConstPtr &msg);
	void LocalPathCallback(const config::OCU::sub::LocalPath::ConstPtr &msg);
	void BladePositionCallback(const config::OCU::sub::BladePosition::ConstPtr &msg);
	void MapCallback(const config::OCU::sub::Map::ConstPtr &msg);
	void LocationCallback(const config::OCU::sub::Location::ConstPtr &msg);
	void PerVelocityCallback(const config::OCU::sub::PerVelocity::ConstPtr &msg);
	void publishCustomIED( config::OCU::pub::CustomIED &msg);
	void publishPositionUpdate( config::OCU::pub::PositionUpdate &msg);
	void publishAssignNavTask( config::OCU::pub::AssignNavTask &msg);
	void publishAssignManTask( config::OCU::pub::AssignManTask &msg);
	void publishAssignMission( config::OCU::pub::AssignMission &msg);

	void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
	tf::StampedTransform getLastTrasform(std::string srcFrame, std::string distFrame);
	void publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report);
	void publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report);
	void heartbeat();
};
#endif /* ROSCOMM_H_ */

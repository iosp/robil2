
/*
 * ComponentMain.cpp
 *
 *  Created on: Monday, 18. July 2016 09:41AM
 *      Author: autogenerated
 */
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include "ComponentMain.h"
ComponentMain::ComponentMain(int argc,char** argv):_inited(init(argc, argv))
{
	_pub_diagnostic=ros::Publisher(_nh.advertise<diagnostic_msgs::DiagnosticArray>("/diagnostics",100));
	_maintains.add_thread(new boost::thread(boost::bind(&ComponentMain::heartbeat,this)));
	_sub_SensorCamL=ros::Subscriber(_nh.subscribe("/SENSORS/CAM/L", 10, &ComponentMain::handleCAML,this));
	_sub_SensorCamR=ros::Subscriber(_nh.subscribe("/SENSORS/CAM/R", 10, &ComponentMain::handleCAMR,this));
	_pub_VOPose=ros::Publisher(_nh.advertise<types::PoseWithConf>("/VO/Pose",100));


}
ComponentMain::~ComponentMain() {
}

bool ComponentMain::init(int argc,char** argv){
	ros::init(argc,argv,"VO_node");
	return true;
}

void ComponentMain::publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame){
	static tf::TransformBroadcaster br;
	br.sendTransform(tf::StampedTransform(_tf, ros::Time::now(), srcFrame, distFrame));
}
tf::StampedTransform ComponentMain::getLastTrasform(std::string srcFrame, std::string distFrame){
	tf::StampedTransform _tf;
		static tf::TransformListener listener;
		try {
		    listener.waitForTransform(distFrame, srcFrame, ros::Time(0), ros::Duration(10.0) );
		    listener.lookupTransform(distFrame, srcFrame, ros::Time(0), _tf);
		} catch (tf::TransformException& ex) {
		    ROS_ERROR("%s",ex.what());
		}
		return _tf;
}
void ComponentMain::publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
	msg.status.push_back(_report);
	_pub_diagnostic.publish(msg);
}
void ComponentMain::publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report){
	diagnostic_msgs::DiagnosticArray msg;
	msg.header = header;
	msg.status.push_back(_report);
	_pub_diagnostic.publish(msg);
}
void ComponentMain::heartbeat(){
	using namespace boost::posix_time;
	ros::Publisher _pub = _nh.advertise<std_msgs::String>("/heartbeat", 10);
	double hz = HEARTBEAT_FREQUANCY;
	while(ros::ok()){
		boost::system_time stop_time = boost::get_system_time() + milliseconds((1/hz)*1000);
		std_msgs::String msg;
		msg.data = "VISUAL_ODOMETRY";
		_pub.publish(msg);
	    boost::this_thread::sleep(stop_time);
	}
}

void ComponentMain::handleCAML(const sensor_msgs::Image& msg)
{
	std::cout<< "Welcome to handleCAML" << msg << std::endl;
}


void ComponentMain::handleCAMR(const sensor_msgs::Image& msg)
{
	std::cout<< "Welcome to handleCAMR!" << msg << std::endl;

}

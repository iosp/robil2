
/*
 * ComponentMain.h
 *
 *  Created on: Thursday, 27. February 2014 12:29PM
 *      Author: autogenerated
 */
#ifndef COMPONENTMAIN_H_
#define COMPONENTMAIN_H_
#include <std_msgs/String.h>
#include <ParameterTypes.h>
#include <tf/tf.h>
#include <boost/thread.hpp>
#include <set>
#include "LocationSet.h"
#include <cognitao_v2/cognitao_v2.h>

#include <ros/ros.h>
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>

class MissionManager;
//namespace decision_making{ class EventQueue; }

class ComponentMain {
	bool _inited;
	  ComponentMain   * _comp;
	  ros::NodeHandle _nh;
	  ros::Publisher _pub_diagnostic;
	  boost::thread_group _maintains;
		ros::Subscriber _sub_AssignNavTask;
		ros::Subscriber _sub_AssignManTask;
		ros::Subscriber _sub_AssignMission;
		ros::Subscriber _sub_BladePosition;
		ros::Subscriber _sub_Location;
		ros::Subscriber _sub_IEDLocation;
		ros::Publisher  _pub_GlobalPath;
		ros::Publisher  _pub_WorkSeqData;
		ros::Publisher  _pub_MissionAcceptance;

	  bool init(int argc,char** argv);
	MissionManager* _mission_manager;
	boost::thread_group threads;
	cognitao::bus::EventQueue* _events;
	LocationSet<geometry_msgs::Point> knownIEDObjects;
	boost::mutex _m;
public:
	ComponentMain(int argc,char** argv);
	virtual ~ComponentMain();
	void handleAssignNavTask(const config::SMME::sub::AssignNavTask& msg);
	void handleAssignManTask(const config::SMME::sub::AssignManTask& msg);
	void handleAssignMission(const config::SMME::sub::AssignMission& msg);
	void handleBladePosition(const config::SMME::sub::BladePosition& msg);
	void handleLocation(const config::SMME::sub::Location& msg);
	void handleIEDLocation(const config::IEDSIM::pub::IEDLocation& msg);
	void publishGlobalPath(config::SMME::pub::GlobalPath& msg);
	void publishWorkSeqData(config::SMME::pub::WorkSeqData& msg);
	void publishMissionAcceptance(config::SMME::pub::MissionAcceptance& msg);
	void publishTransform(const tf::Transform& _tf, std::string srcFrame, std::string distFrame);
	tf::StampedTransform getLastTransform(std::string srcFrame, std::string distFrame);
	void publishDiagnostic(const diagnostic_msgs::DiagnosticStatus& _report);
	void publishDiagnostic(const std_msgs::Header& header, const diagnostic_msgs::DiagnosticStatus& _report);
	void heartbeat();

	MissionManager * const mission_manager(){return _mission_manager;}

	void set_events(cognitao::bus::EventQueue* e){ _events = e; }
	cognitao::bus::EventQueue* events()const{ return _events; }

//	void rise_taskStarted();
//	void rise_taskPaused();
//	void rise_taskResumed();
//	void rise_taskStopped();
//	void rise_taskAborted();
//	void rise_taskCompleted();
};
#endif /* COMPONENTMAIN_H_ */

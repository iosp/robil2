
/*
 * RosComm.cpp
 *
 *  Created on: Sunday, 02. February 2014 10:15AM
 *      Author: autogenerated
 */
#include <ros/ros.h>
#include <std_msgs/String.h>
#include "RosComm.h"
#include "../component/ComponentMain.h"
#include <string>       // std::string
#include <iostream>     // std::cout
#include <sstream>
#include "ParameterHandler.h"
RosComm::RosComm(ComponentMain* comp,int argc,char** argv)
	: _inited(init(argc, argv)), _comp(comp)
{
	_sub_IEDDetectionEvent=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SMME","IEDDetectionEvent","sub"), 10, &RosComm::IEDDetectionEventCallback,this));
	_sub_IEDLocation=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SMME","IEDLocation","sub"), 10, &RosComm::IEDLocationCallback,this));
	_sub_MissionPlan=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SMME","MissionPlan","sub"), 10, &RosComm::MissionPlanCallback,this));
	_sub_StatusData=ros::Subscriber(_nh.subscribe(fetchParam(&_nh,"SMME","StatusData","sub"), 10, &RosComm::StatusDataCallback,this));
	_pub_MissionStatus=ros::Publisher(_nh.advertise<config::SMME::pub::MissionStatus>(fetchParam(&_nh,"SMME","MissionStatus","pub"),10));
	_pub_MissionGlobalPath=ros::Publisher(_nh.advertise<config::SMME::pub::MissionGlobalPath>(fetchParam(&_nh,"SMME","MissionGlobalPath","pub"),10));
	_pub_IEDPosAtt=ros::Publisher(_nh.advertise<config::SMME::pub::IEDPosAtt>(fetchParam(&_nh,"SMME","IEDPosAtt","pub"),10));
	_pub_ExecuteWorkSequenceCommand=ros::Publisher(_nh.advertise<config::SMME::pub::ExecuteWorkSequenceCommand>(fetchParam(&_nh,"SMME","ExecuteWorkSequenceCommand","pub"),10));
}
RosComm::~RosComm()
{
}
bool RosComm::init(int argc,char** argv){
	ros::init(argc,argv,"SMME_node");
	return true;
}


void RosComm::IEDDetectionEventCallback(const config::SMME::sub::IEDDetectionEvent::ConstPtr &msg)
{
	_comp->handleIEDDetectionEvent(*msg);
}
	

void RosComm::IEDLocationCallback(const config::SMME::sub::IEDLocation::ConstPtr &msg)
{
	_comp->handleIEDLocation(*msg);
}
	

void RosComm::MissionPlanCallback(const config::SMME::sub::MissionPlan::ConstPtr &msg)
{
	_comp->handleMissionPlan(*msg);
}
	

void RosComm::StatusDataCallback(const config::SMME::sub::StatusData::ConstPtr &msg)
{
	_comp->handleStatusData(*msg);
}
	

void RosComm::publishMissionStatus( config::SMME::pub::MissionStatus &msg)
{
	_pub_MissionStatus.publish(msg);
}
	

void RosComm::publishMissionGlobalPath( config::SMME::pub::MissionGlobalPath &msg)
{
	_pub_MissionGlobalPath.publish(msg);
}
	

void RosComm::publishIEDPosAtt( config::SMME::pub::IEDPosAtt &msg)
{
	_pub_IEDPosAtt.publish(msg);
}
	

void RosComm::publishExecuteWorkSequenceCommand( config::SMME::pub::ExecuteWorkSequenceCommand &msg)
{
	_pub_ExecuteWorkSequenceCommand.publish(msg);
}
	
